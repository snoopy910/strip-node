services:
  ganache:
    image: strip-contracts
    container_name: ganache
    ports:
      - "8545:8545"
    entrypoint: "anvil --chain-id 1337 --host 0.0.0.0 --port 8545 --mnemonic 'rifle cloud amused end pyramid swarm anxiety kitchen ceiling cotton rib gain'"
    volumes:
      - ganache-data:/root/.anvil
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8545",
          "-X",
          "POST",
          "-H",
          "Content-Type: application/json",
          "--data",
          '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}',
        ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 3s

  # Foundry deployment service
  foundry:
    image: strip-contracts
    environment:
      PRIVATE_KEY: "0x76163f58a83febacfdef93e2142591d4d676432fa6c737ce1dd90a51083c461a"
    depends_on:
      ganache:
        condition: service_healthy
    # Override the entrypoint to wait for anvil to be ready
    entrypoint: "forge script script/Deploy.s.sol:DeployScript --rpc-url http://ganache:8545 --broadcast -vvv"

  bootnode:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: bootnode
    ports:
      - "30303:30303"
    environment:
      PORT: 30303
      KEY_PATH: "/app/static-bootnode"
      IS_BOOTSTRAP: true

    depends_on:
      foundry:
        condition: service_completed_successfully

  validator1postgres:
    image: postgres:14.13
    container_name: validator1postgres
    environment:
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - validator1postgres-data:/var/lib/postgresql/data

  validator2postgres:
    image: postgres:14.13
    container_name: validator2postgres
    environment:
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - validator2postgres-data:/var/lib/postgresql/data

  validator1:
    build:
      context: .
      dockerfile: ./strip-validator/Dockerfile
    container_name: validator1
    depends_on:
      - bootnode
      - validator1postgres
    ports:
      - "30304:30304"
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/status"]
      interval: 15s
      timeout: 3s
      retries: 10
      start_period: 2s
    environment:
      VALIDATOR_PUBLIC_KEY: "0x26d1556a83c01a9d2b1cce29b32cb520238efc602f86481d2d0b9af8a2fff0cf"
      VALIDATOR_PRIVATE_KEY: "0xb0a0aa1369839ffbf2778fcedcad2ba70b0237e6071b791a80a6f9e11380ffa2"
      RPC_URL: "http://ganache:8545"
      HTTP_PORT: 8080
      PORT: 30304
      POSTGRES_HOST: "validator1postgres:5432"
      BOOTNODE_URL: "/dns/bootnode/tcp/30303/p2p/QmTfM73oQxzx6DVyjCm5AECW3hVbXJiSLYtosNauaX9gJR"

  validator2:
    build:
      context: .
      dockerfile: ./strip-validator/Dockerfile
    container_name: validator2
    depends_on:
      - bootnode
      - validator2postgres
    ports:
      - "30305:30305"
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/status"]
      interval: 15s
      timeout: 3s
      retries: 10
      start_period: 2s
    environment:
      VALIDATOR_PUBLIC_KEY: "0x54455a1f7f4244ef645ac62baa8bd90af0cc18cdb0eae369766b7b58134edf35"
      VALIDATOR_PRIVATE_KEY: "0x4d539b1896a8f7064a7207fa005b13b64f90eff78564e278c14b1089d2d5f8de"
      RPC_URL: "http://ganache:8545"
      HTTP_PORT: 8081
      PORT: 30305
      POSTGRES_HOST: "validator2postgres:5432"
      BOOTNODE_URL: "/dns/bootnode/tcp/30303/p2p/QmTfM73oQxzx6DVyjCm5AECW3hVbXJiSLYtosNauaX9gJR"

  sequencerpostgres:
    image: postgres:14.13
    container_name: sequencerpostgres
    environment:
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - sequencerpostgres-data:/var/lib/postgresql/data

  sequencer:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: sequencer
    depends_on:
      validator1:
        condition: service_healthy
      validator2:
        condition: service_healthy
    ports:
      - "30306:30306"
      - "80:8082"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/status"]
      interval: 15s
      timeout: 3s
      retries: 10
    environment:
      PRIVATE_KEY: "0x76163f58a83febacfdef93e2142591d4d676432fa6c737ce1dd90a51083c461a"
      RPC_URL: "http://ganache:8545"
      HTTP_PORT: 8082
      PORT: 30306
      POSTGRES_HOST: "sequencerpostgres:5432"
      IS_SEQUENCER: true

  solver:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: solver
    ports:
      - "8083:8083"
    environment:
      HTTP_PORT: 8083
      IS_TEST_SOLVER: true

  # Bitcoin Core service
  bitcoind:
    image: blockstream/bitcoind:latest
    container_name: bitcoind
    restart: unless-stopped
    ports:
      - "8332:8332" # RPC port
      - "8333:8333" # P2P port
      - "28332:28332" # ZMQ rawblock
      - "28333:28333" # ZMQ rawtx
    volumes:
      - bitcoin-data:/data
      - ./bitcoin.conf:/data/bitcoin.conf
    command: bitcoind -conf=/data/bitcoin.conf

  # Electrs (Electrum Rust Server)
  electrs:
    image: mempool/electrs:latest
    container_name: electrs
    restart: unless-stopped
    depends_on:
      - bitcoind
    ports:
      - "50001:50001" # Default Electrum server port
    volumes:
      - electrs-data:/home/electrs/db
    command:
      - --network=regtest
      - --daemon-rpc-addr=bitcoind:8332
      - --db-dir=/home/electrs/db
      - --http-addr=0.0.0.0:50001
      - --cookie=bitcoin:bitcoin
      - --jsonrpc-import
      - --timestamp
      - --cors=*
      - --electrum-txs-limit=1000
      - --address-search
    environment:
      - RUST_BACKTRACE=1

volumes:
  bitcoin-data:
  electrs-data:
  validator1postgres-data:
  validator2postgres-data:
  sequencerpostgres-data:
  ganache-data:
